/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xil_types.h"
#include "xil_io.h"
#include "main.h"

#if defined (__MICROBLAZE__)
static void MB_StartAxiTimer(void)
{
	u32 ControlStatusReg;

	/*  Checking if the timer is enabled  */
	if(Xil_In32(MB_AXITIMER_BASEADDR + MB_AXITIMER_TCSR0_OFFSET) &&
			    MB_AXITIMER_CSR_ENABLE_TMR_MASK)
	{
		return;
	}
	/*
	 * Read the current register contents such that only the necessary bits
	 * of the register are modified in the following operations
	 */
	ControlStatusReg = Xil_In32(MB_AXITIMER_BASEADDR +
							    MB_AXITIMER_TCSR0_OFFSET);
	/*
	 * Remove the reset condition such that the timer counter starts running
	 * with the value loaded from the compare register
	 */
	Xil_Out32((MB_AXITIMER_BASEADDR + MB_AXITIMER_TCSR0_OFFSET),
			  (ControlStatusReg | MB_AXITIMER_CSR_ENABLE_TMR_MASK |
			   MB_AXITIMER_CSR_AUTO_RELOAD_MASK));
}

void XTime_GetTime(XTime *time_val)
{
	*time_val = Xil_In32((MB_AXITIMER_BASEADDR) +
						 (MB_AXITIMER_TCR_OFFSET));
}
#endif

/* Porting : Timing functions
 *	How to capture time and convert to seconds must be ported to whatever
 *  is supported by the platform.
 *	e.g. Read value from on board RTC, read value from cpu clock cycles,
 *  performance counter etc.
 */
XTime barebones_clock() {
	XTime time_val;
	XTime_GetTime(&time_val);
	return time_val;
}

void print_time(char *label, float time) {
  int ms = (int)(time * 10000.0F + 0.5F);
  xil_printf("%-43s %d.%04d\n", label, ms / 10000, ms % 10000);
}


/* Define target specific global time variables. */
XTime start_time_val;
XTime stop_time_val;
XTime User_Time;
float Final_User_Time;

/* Function : start_time
 *	This function will be called right before starting the timed portion
 *	of the benchmark.
 *	Implementation here is capturing a system timer.
 */
void start_time(void) {
	GETTIME(&start_time_val);
}

/* Function : stop_time
 *	This function will be called right after ending the timed portion
 *  of the benchmark.
 *   Implementation may be capturing a system timer.
 *	or other system parameters - e.g. reading the current value of cpu cycles counter.
 */

void stop_time(void) {
	GETTIME(&stop_time_val);
}

int main()
{
    init_platform();
#if defined (__MICROBLAZE__)
	MB_StartAxiTimer();
#endif
    start_time();
//    xil_printf("Hello World\n\r");
//    xil_printf("Successfully ran Hello World application\n");
    User_Time = 9999 & stop_time_val;
    User_Time = 9999 & stop_time_val;
    User_Time = 9999 & stop_time_val;
    User_Time = 9999 & stop_time_val;
    User_Time = 9999 & stop_time_val;
    User_Time = 9999 & stop_time_val;
    User_Time = 9999 & stop_time_val;
    User_Time = 9999 & stop_time_val;
    User_Time = 9999 & stop_time_val;
    User_Time = 9999 & stop_time_val;
    User_Time = 9999 & stop_time_val;
    User_Time = 9999 & stop_time_val;
    User_Time = 9999 & stop_time_val;
    User_Time = 9999 & stop_time_val;


    stop_time();
    if (stop_time_val < start_time_val) {
    		User_Time = ((-1) - start_time_val) + stop_time_val;
	} else {
		User_Time = stop_time_val - start_time_val;
	}

    xil_printf("User time: %d us\n", Mic_secs_Per_Second*((float)(User_Time))/((float)COUNTS_PER_SECOND));
    cleanup_platform();
    return 0;
}
